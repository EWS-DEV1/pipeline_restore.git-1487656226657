---
stages:
- name: Build Project
  inputs:
  - url: https://github.com/SMD-DEV1/DevOps_PoC_1_SMD.git
    type: git
    branch: master
    dir_name: null
  jobs:
  - name: Build Project
    type: builder
    artifact_dir: target
    build_type: maven
    script: |-
      #!/bin/bash
      export JAVA_HOME=$JAVA8_HOME
      mvn -B package
      cp Dockerfile $ARCHIVE_DIR/
      cp manifest.yml $ARCHIVE_DIR/
    enable_tests: true
    test_file_pattern: target/surefire-reports/TEST-*.xml
- name: Deploy Web App
  inputs:
  - type: job
    stage: Build Project
    job: Build Project
    dir_name: null
  properties:
  - name: TARGET
    value: spring-petclinic-1.4.2.war
    type: text
  - name: SERVERS
    value: |-
      169.46.206.21
      169.54.208.74
    type: text_area
  - name: SSH_KEY
    value: |-
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpAIBAAKCAQEA3e83cLWN/ED7UpvXwcS1jDYRkSti5sgcizz32/ic5xE61F+N
      XQUfVooCVD95deFXQ83OW/oH0mmpUqfG4d0h0a4YwEvVKRSgMOmeyhhn1gaEn33u
      rNIULfvhOH4DDPbh3Ff9IFpFLxaUZc6y/qjA3fHrVzl4vd8yQv4Rdv2/1Tvba6Ag
      uOwUiSSYIhzTnkYjpwnnGyuyQVDCHwKzzPwuJdpE43ovk0MQcwvGikoyp+rFyizm
      csmUM+GWR/hPKK4f/2fHtN3JbrxY0tIlYJgtWHvKbAV50VYLzxB5txk4aw6hZOEB
      cfWqOeso1ppJmtivsgI9oWNh5SpcjammrUoGdQIDAQABAoIBAQDOBZFrub5y20fz
      KeSiZh86Z77rCmGnZ0DIKPLWavYMsrvwBjvOjEDJLxh2aO4x9dvyf4z/aR31wEyF
      BGblqUgJxBoJ+NuKZTFH9reHWBycXDSlclwsZmCBR3+N17yxPkXxLGU4sVPkIIvl
      7nnPWYyg/EDCGgHyEM4xznUcBvcb09h46eQSTwX/wm8x0HWO49uc0zYmsIjgjlgr
      DotB0Vo1ywelNGDNQzpAV135/4QZhytW3edhSyeeh7/IdpUz3arWcO/ljoArkWbF
      q4WYKPyRpYK1H5MB7HubM9WU7N966XTIVpwnag9qHoGArUlZym/O41ukZiLSO+N1
      +z2z6YtJAoGBAPOWcP0+78ZXTUrjE1cZHAbdaruciafmDcA7lrasAi5IbNecPFgK
      fbhROrwQr17K8PLsnuz+9H4LybY0AM+BqgKcRqYdPSO1t6LIS5NCxsSbuS84XU1g
      i4lrXe+4KFVVsPdHCRi3nkBk1qi49qgTlPRCh7Hjfpml/MOUZBsInXbDAoGBAOk+
      UAxxD2qaZaJP4OZRXiUqthclS+PKbeH+umOUxnpVzT43WBLtD88quNpDfCbQMgMl
      jgyTl2DML+JdvxsXGAyBMzLRPYkkdMqLv7m7H6F/y7xkGNf7V6cO8b8sDDYffHNl
      4HDNgNlqpVikBxSNB8EnEp30Xrr3EZDaX9RPC+pnAoGBAMfTe5+U+NiKF+M+Q0hp
      Vd+f1oZQFXFCPbecargyhZt4WKnMBojnGlmRcZCEU4l9DIsMaBfd065vdytcn+ma
      4mA/2Yk+ZUCdOyd0DuOgnTT+1r0RDSGD+RRjmu0j8xqGMKW6hZDcWRtUXfCNw/MA
      FWsIBQ9+pAXh8Gh1nGW8/IhHAoGAJ3C8BH6Rxsr46KttMkUMEGjahatu28P9NLvo
      NLKRpVog7KZbJEgl5jgpLe8/bSjDbDjLfmDuthWQ+0wy5pfPHz4xtCQhrbEWdrGO
      6A82WA7OGrsqYEtGFR+3zUXbgsNsPe86NpjpctpPv19tOxJl/0lmIoOSCTeCJuZm
      UfZT430CgYAS57VXInuOyw3GFi8yDsJCMqFvlJMWKpR2ft4HwTqAsofR1UMbebJi
      CdQ+z6ZnbxHA9vwEGv+z2+3Vmd9GCjjqemyhivi/99nSmycANXCWPbKnKNhkbeEc
      psABTPWAregB3EWtTITVNlovrKoIQe1BK04bpE0ixAe9ptvU/lTNTQ==
      -----END RSA PRIVATE KEY-----
    type: text_area
  - name: REMOTE_COMMAND
    value: |-
      /opt/apache-tomcat-8.5.11/bin/shutdown.sh

      rm -rf /opt/petclinic/webapp
      unzip -q /tmp/spring-petclinic-1.4.2.war -d /opt/petclinic/webapp

      /opt/apache-tomcat-8.5.11/bin/startup.sh
    type: text_area
  jobs:
  - name: Deploy
    type: tester
    script: |-
      #!/bin/bash
      SSH_KEY_FILE="$(mktemp)"
      SSH_OPTIONS="-o PreferredAuthentications=publickey -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $SSH_KEY_FILE"
      SSH_USER="root"

      echo "$SSH_KEY" > "$SSH_KEY_FILE"

      for SERVER in ${SERVERS};
      do
          echo "server: $SERVER"
          scp $SSH_OPTIONS $TARGET $SSH_USER@$SERVER:/tmp/
          echo "eval $REMOTE_COMMAND" | ssh $SSH_OPTIONS $SSH_USER@$SERVER 2>/dev/null
          echo $?
      done

      rm "$SSH_KEY_FILE"
- name: Deploy to Cloud Foundry
  inputs:
  - type: job
    stage: Build Project
    job: Build Project
    dir_name: null
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ibm:yp:us-south
      organization: smdOrg
      space: poc
      application: devops_poc_1_smd_cf
    script: |
      #!/bin/bash
      # uncomment the next line for unsuccessful deployment (PagerDuty testing)
      #sed -i 's/256M/99999M/g' manifest.yml
      sed -i 's/256M/512M/g' manifest.yml
      cf push "${CF_APP}"
- name: Build Container Image
  inputs:
  - type: job
    stage: Build Project
    job: Build Project
    dir_name: null
  jobs:
  - name: Build
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ibm:yp:us-south
      organization: smdOrg
      space: poc
    COMMAND: "#!/bin/bash\n# The following colors have been defined to help with presentation\
      \ of logs: green, red, label_color, no_color.  \nlog_and_echo \"$LABEL\" \"\
      Starting build script\"\n\n# The IBM Container BM Containers plug-in (cf ic),\
      \ Git client (git), and IDS Inventory CLI (ids-inv) have been installed.\n#\
      \ Based on the organization and space selected in the Job credentials are in\
      \ place for both IBM Container Service and IBM Bluemix \n#####################\n\
      # Run unit tests    #\n#####################\nlog_and_echo \"$LABEL\" \"No unit\
      \ tests cases have been checked in\"\n\n######################################\n\
      # Build Container via Dockerfile     #\n######################################\n\
      \n# REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n# FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}\n\
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property\
      \ on the stage.\n\nif [ -f Dockerfile ]; then \n    log_and_echo \"$LABEL\"\
      \ \"Building ${FULL_REPOSITORY_NAME}\"\n    ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l info -m \"New container build requested for ${FULL_REPOSITORY_NAME}\"\n\
      \    # build image\n    BUILD_COMMAND=\"\"\n    if [ \"${USE_CACHED_LAYERS}\"\
      \ == \"true\" ]; then \n        BUILD_COMMAND=\"build --pull --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n  \
      \  else \n        BUILD_COMMAND=\"build --no-cache --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n  \
      \  fi \n\n    if [ $RESULT -ne 0 ]; then\n        log_and_echo \"$ERROR\" \"\
      Error building image\"\n        ice_retry info \n        ice_retry images\n\
      \        ${EXT_DIR}/print_help.sh\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l bad -m \"Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)\"\
      \n        exit 1\n    else\n        log_and_echo \"$SUCCESSFUL\" \"Container\
      \ build of ${FULL_REPOSITORY_NAME} was successful\"\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l good -m \"Container build of ${FULL_REPOSITORY_NAME} was successful\"\n\
      \    fi  \nelse \n    log_and_echo \"$ERROR\" \"Dockerfile not found in project\"\
      \n    ${EXT_DIR}/utilities/sendMessage.sh -l bad -m \"Failed to get Dockerfile.\
      \ $(get_error_info)\"\n    exit 1\nfi  \n\n######################################################################################\n\
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE\
      \    #\n######################################################################################\n\
      echo \"IMAGE_NAME=${FULL_REPOSITORY_NAME}\" >> $ARCHIVE_DIR/build.properties"
    IMAGE_NAME: devops_poc_1_smd
    USE_CACHED_LAYERS: 'true'
- name: Deploy to IBM Containers
  inputs:
  - type: job
    stage: Build Container Image
    job: Build
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ibm:yp:us-south
      organization: smdOrg
      space: poc
    COMMAND: "#!/bin/bash\n# The following are some example deployment scripts.  Use\
      \ these as is or fork them and include your updates here:\necho -e \"${label_color}Starting\
      \ deployment script${no_color}\"\n\n\n# To view/fork this script goto: https://github.com/Osthanes/deployscripts\n\
      # git_retry will retry git calls to prevent pipeline failure on temporary github\
      \ problems\n# the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer\n\
      git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts\n\
      \n\n# You can deploy your Image as either a single Container or as a Container\
      \ \n# Group.  A Container Group deploys a number of containers to enhance\n\
      # scalability or reliability.  By default we will deploy as a single \n# container.\
      \  To switch to a group deploy, comment out the line below\n# containing deploycontainer.sh\
      \ and uncomment the line for deploygroup.sh\n\n# Deploy with containers:\n#\
      \ Optional environment properties (can be set directly in this script, or defined\
      \ as environment properties):\n#      NAME              Value         Description\n\
      #   =============      =========     ==============\n#   BIND_TO           \
      \  String       Specify a Bluemix application name that whose bound services\
      \ you wish to make available to the container.  By default this is not set.\n\
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano\
      \ (128), micro (256), tiny (512), small (1024), medium (2048),\n#          \
      \                                                  large (4096), x-large (8192),\
      \ 2x-large (16384).\n#                                    Default is micro (256).\n\
      #   CONCURRENT_VERSIONS Number       Number of versions of this container to\
      \ leave active.  \n#                                    Default is 1\n#\n#/bin/bash\
      \ deployscripts/deploycontainer.sh\n\n# Deploy Container Group:\n# Optional\
      \ environment properties (can be set directly in this script, or defined as\
      \ environment properties):\n#      NAME              Value         Description\n\
      #   =============      =========     ==============\n#   ROUTE_HOSTNAME    \
      \  String       Specify the Hostname for the Cloud Foundry Route you wish to\
      \ assign to this container group.  By default this is not set.\n#   ROUTE_DOMAIN\
      \        String       Specify domain name for the Cloud Foundry Route you wish\
      \ to assign to this container group.  By default this is not set.\n#   BIND_TO\
      \             String       Specify a Bluemix application name that whose bound\
      \ services you wish to make available to the container.  By default this is\
      \ not set.\n#   DESIRED_INSTANCES:  Number       Specify the number of instances\
      \ in the group.  Default value is 1.\n#   AUTO_RECOVERY:      Boolean      Set\
      \ auto-recovery to true/false.  Default value is false.\n\n#               \
      \                     Default is false.\n#   CONTAINER_SIZE      String    \
      \   Specify container size: pico (64), nano (128), micro (256), tiny (512),\
      \ small (1024), medium (2048),\n#                                          \
      \                  large (4096), x-large (8192), 2x-large (16384).\n#      \
      \                              Default is micro (256).\n#   CONCURRENT_VERSIONS\
      \ Number       Number of versions of this group to leave active.\n#        \
      \                            Default is 1\n# IF YOU WANT CONTAINER GROUPS ..\
      \ uncomment the next line, and comment out the previous deployment line (/bin/bash\
      \ deployscripts/deploygroup.sh)\nexport DESIRED_INSTANCES=2\nexport ROUTE_HOSTNAME=DevOps-PoC-1-SMD-IC\n\
      /bin/bash deployscripts/deploygroup.sh\n\nRESULT=$?\n\n# source the deploy property\
      \ file\nif [ -f \"${DEPLOY_PROPERTY_FILE}\" ]; then\n  source \"$DEPLOY_PROPERTY_FILE\"\
      \nfi\n\n#########################\n# Environment DETAILS   #\n#########################\n\
      # The environment has been setup.\n# The Cloud Foundry CLI (cf), IBM Container\
      \ Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python\
      \ 2.7.3 (python) have been installed.\n# Based on the organization and space\
      \ selected in the Job credentials are in place for both IBM Container Service\
      \ and IBM Bluemix\n\n# The following colors have been defined to help with presentation\
      \ of logs: green, red, label_color, no_color.\nif [ $RESULT -ne 0 ]; then\n\
      \    echo -e \"${red}Executed failed or had warnings ${no_color}\"\n    ${EXT_DIR}/print_help.sh\n\
      \    exit $RESULT\nfi\necho -e \"${green}Execution complete${no_label}\""
    PORT: '80'
    CONTAINER_NAME: DevOps_PoC_1_SMD
    DEPLOY_TYPE: red_black
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
